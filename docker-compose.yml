version: '3.1'
services:
  nginx-proxy-manager:  #principal intérêt rediriger vers un port exautique + automatiser demande certificat pour https
    image: 'jc21/nginx-proxy-manager:latest'
    restart: unless-stopped
    ports:
      - '80:80'
      - '42081:81' # port pour tapper l'interface de management
      - '443:443'
    volumes:
      - ./volumes/Nginx-proxy-manager/data:/data
      - ./volumes/Nginx-proxy-manager/letsencrypt:/etc/letsencrypt

  portainer:
    image: portainer/portainer-ce:alpine
    container_name: portainer
#    command: -H unix:///var/run/docker.sock
    ports:
      - "42090:9443"
    volumes:
      - ./volumes/Portainer/data:/data
      - ./volumes/Portainer/var/run/docker.sock:/var/run/docker.sock
    restart: unless-stopped

  uptime-kuma:
    image: louislam/uptime-kuma:1
    container_name: uptime-kuma
    volumes:
      - ./volumes/Uptime-kuma/uptime-kuma-data:/app/data
    ports:
      - 42031:3001  # <Host Port>:<Container Port>
    restart: unless-stopped

  db:
    image: postgres:16
    user: root
    environment:
      - POSTGRES_USER=odoo_client
      - POSTGRES_PASSWORD=changemeoryouilldie
      - POSTGRES_DB=postgres
      - PGDATA=/var/lib/postgresql/data/pgdata
    restart: always             # run as a service
    volumes:
        - ./volumes/postgresql/data:/var/lib/postgresql/data

  odoo17:
    image: odoo:17
    user: root
    depends_on:
      - db
    ports:
      - "42017:8069"
      - "42018:8072" # live chat
    tty: true
    command: --
    environment:
      - HOST=db
      - USER=odoo_client
      - PASSWORD=changemeoryouilldie
    volumes:
      #- /etc/timezone:/etc/timezone:ro
      #- /etc/localtime:/etc/localtime:ro
      # - ./entrypoint.sh:/entrypoint.sh   # if you want to install additional Python packages, uncomment this line!
      - ./volumes/Odoo/odoo-web-data-client:/var/lib/odoo
      - ./volumes/Odoo/addons:/mnt/extra-addons
      - ./volumes/Odoo/etc:/etc/odoo
    restart: always             # run as a service

    #  nginx:
#    restart: always
#    image: nginx
#    container_name: nginx
#    ports:
#      - "80:80"
#      - "443:443"
#    volumes:
#      - "/etc/nginx/conf.d"
#      - "/etc/nginx/vhost.d" 
#      - "/usr/share/nginx/html"
#      - "./volumes/nginx-sample-website/conf.d:/etc/nginx/conf.d" 
#      - "./volumes/proxy/certs:/etc/nginx/certs:ro"
#
#  nginx-gen:
#    restart: always
#    image: jwilder/docker-gen
#    container_name: nginx-gen
#    volumes:
#      - "/var/run/docker.sock:/tmp/docker.sock:ro"
#      - "./volumes/proxy/templates/nginx.tmpl:/etc/docker-gen/templates/nginx.tmpl:ro"
#    volumes_from:
#      - nginx
#    entrypoint: /usr/local/bin/docker-gen -notify-sighup nginx -watch -wait 5s:30s /etc/docker-gen/templates/nginx.tmpl /etc/nginx/conf.d/default.conf

#  letsencrypt-nginx-proxy-companion:
#    restart: always
#    image: jrcs/letsencrypt-nginx-proxy-companion
#    container_name: letsencrypt-nginx-proxy-companion
#    volumes_from:
#      - nginx
#    volumes:
#      - "/var/run/docker.sock:/var/run/docker.sock:ro"
#      - "./volumes/proxy/certs:/etc/nginx/certs:rw"
#    environment:
#      - NGINX_DOCKER_GEN_CONTAINER=nginx-gen


# autre solution de monitoring + secu : wazuh 
